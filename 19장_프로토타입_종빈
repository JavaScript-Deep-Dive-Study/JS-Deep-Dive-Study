## 객체지향 프로그래밍


> `상태` 와 `동작`을 하나의 논리적인 단위로 묶은 복합적인 자료구조인 `객체`의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임
>

## 상속과 프로토타입


- `상속` : 특정 객체의 프로퍼티 또는 메서드를 다른 객체가 상속받아 그대로 사용할 수 있는 것

```jsx
//생성자 함수
function Circle(radius) {
	this.radius = radius;
	this.getArea = function () {
		return Math.PI * this.radius ** 2;
	}
}

const circle1 = new Circle(1);
const circle2 = new Circle(2);

console.lgo(circle1.getArea === circle2.getArea); // false
```

circle1, circle2의 두 인스턴스는 같은 기능을 가지지만 서로 다른 함수(`getArea`)를 소유한다. 따라서 불필요하게 메모리를 낭비하게 된다.

![https://velog.velcdn.com/images/hangem422/post/01c1b954-1fb9-4452-b57a-e51a87533411/javascript-prototype01.png](https://velog.velcdn.com/images/hangem422/post/01c1b954-1fb9-4452-b57a-e51a87533411/javascript-prototype01.png)

따라서, 불필요한 리소스를 방지하기 위해서 자바스크립트는 `프로토타입`을 기반으로 상속을 구현해 중복을 제거한다.

```jsx
//생성자 함수
function Circle(radius) {
	this.radius = radius;
}

// 공유해서 사용할 수 있도록 프로토타입에 추가한다.
Circle.prototype.getArea = function () {
  return Math.PI * this.radius ** 2;
};

const circle1 = new Circle(1);
const circle2 = new Circle(2);

// 두 인스턴스틑 하나의 getArea를 공유한다.
console.log(circle1.getArea === circle2.getArea); // true
```

![https://user-images.githubusercontent.com/89209626/151707639-c499c5b4-d963-44e1-9532-8dc47f856d68.png](https://user-images.githubusercontent.com/89209626/151707639-c499c5b4-d963-44e1-9532-8dc47f856d68.png)

## 프로토타입 객체


> 객체지향 프로그래밍의 근간을 이루는 객체 간 상속을 구현하기 위해 사용된다. 어떤 객체의 상위(부모) 객체의 역할을 하는 객체로서 다른  객체에 공유 프로퍼티(메서드 포함)를 제공한다.
>
- 모든 객체는 하나의 프로토타입을 가지며, 모든 프로토타입은 생성자 함수와 연결되어있다.

![https://velog.velcdn.com/images/jjinichoi/post/4cb8ff5b-98a1-42ca-adfe-8a7ff32614b5/image.png](https://velog.velcdn.com/images/jjinichoi/post/4cb8ff5b-98a1-42ca-adfe-8a7ff32614b5/image.png)

- `__proto__` 접근자 프로퍼티를 통해 `프로토타입`에 간접적으로 접근할 수 있다.

```jsx
//모든 객체는 자신을 만든 생성자 함수의 prototype 객체를 __proto__라는 속성을 통해 참조할 수 있다.

let obj = new Object();

//obj.__proto__는 Object.prototype 가리킨다
console.log(obj.__proto__ === Object.prototype) //true
```

- `프로토타입`은 자신의 constructor 프로퍼티를 통해 `생성자 함수`에 접근할 수 있다.

```jsx
let obj = new Object();

console.log(Object.prototype.constructor === Object);
```

- `생성자 함수` 는 자신의 prototype 프로퍼티를 통해 `프로토타입`에 접근할 수 있다.

```jsx
function Person = {
	this.name = 'Kim';
}

console.log(Person.prototype);
```

### 💡 즉, 프로토타입과 생성자 함수가 서로 연결되어 있어서, JavaScript에서 객체 지향 프로그래밍이 가능해진다.

### 1. __proto__ 접근자 프로퍼티

> 모든 객체는 `__proto__` 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 `[[Prototype]]` 내부 슬롯에 간접적으로 접근할 수 있다.
>

__proto__는 접근자 프로퍼티다.

```jsx
const obj = {};
const parent = { x: 1 };

// __proto__로 접근하면 getter 함수가 호출되고
obj.__proto__;
// _proto__를 할당하면 setter 함수가 호출된다.
obj.__proto__ = parent;

console.log(obj.x);	// 1
```

__proto__는 접근자 프로퍼티는 상속을 통해 사용된다.

```jsx
let obj = new Object();  // obj는 Object.prototype을 프로토타입으로 가짐

//__proto__는 모든 객체가 가지고 있는 속성처럼 보이지만, 사실은 각 객체의 프로토타입에서 상속된 속성이다.
console.log(obj.__proto__ === Object.prototype);  // true
```

__proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하는 이유

```jsx
const parert = {};
const child = {};

// child의 프로토타입을 parent로 설정
child.__proto__ = parent;
// parent 프로토타입을 child로 설정
parent.__proto__ = child;	// TypeError: Cyclic __proto__ value
```

위와 같이 양방향으로 프로토타입 체인이 만들어지면, 체인의 종점이 없어 프로퍼티 검색을 할 때 상호 참조가 발생한다. 따라서 __proto__ 접근자 프로퍼티를 통해 체크하며 접근하고 교체하도록 구현되어 있다.

__proto__ 접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 권장하지 않는다.

- 직접 상속을 통해 `Object.prototype` 을 상속받지 않는 객체를 생성할 수 도 있다.

```jsx
//생성된 객체는 프로토타입이 null로 설정된다. 이는 객체가 상속받을 프로토타입이 없음을 의미한다.
//따라서 이 객체는 Object.prototype에 정의된 속성 및 메서드
//(toString, hasOwnProperty, __proto__ 등)를 가지지 않는다.
const obj = Object.create(null);
```

```jsx
const obj = {};
const parent = {x: 1};

Object.getPrototypeOf(obj);				// obj.__proto__;

Object.setPrototypeOf(obj, parent);		// obj.__proto__ = parent;
```

### 2. 함수 객체의 prototype 프로퍼티

> 함수 객체만이 소유하는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다.
>

```jsx
//1. Person은 prototype 프로퍼티를 가지게된다.
//2. Person.prototype은 빈 객체를 가지고 시작한다.
function Person(name) {
	this.name = name;
}

//3. Person 객체에 sayHello라는 메서드를 추가.
Person.prototype.sayHello = function() {
	console.log(`Hello, my name is ${this.name}`);
};

//4. Person 생성자 함수로 생성된 두 인스턴스는 자동으로 Person.prototype을 가지게되고,
//5. sayHello메서드를 상속받아 사용할 수 있게된다.
let alice = new Person('Kim');
let bob = new Person('Bob');

alice.sayHello();  // "Hello, my name is Kim"
bob.sayHello();    // "Hello, my name is Bob"
```

| 구분 | 소유 | 값 | 사용 주체 | 사용 목적 |
| --- | --- | --- | --- | --- |
| __proto__
접근자 프로퍼티 | 모든 객체 | 프로토타입의 참조 | 모든 객체 | 객체가 자신의 프로토타입에 접근 또는 교체하기 위해 |
| prototype
프로퍼티 | constructor | 프로토타입의 참조 | 생성자 함수 | 생성자 함수가 자신이 생성할 객체의 프로토타입을 할당하기 위해 사용 |

### 3. 프로토타입의 constructor 프로퍼티와 생성자 함수

> 모든 프로토타입은 `constructor` 프로퍼티를 갖는다.
>

```jsx
//생성자 함수
function Person(name) {
	this.name = name
}

//Person 생성자 함수로 생성된 me 객체는 Person.prototype을 상속 받게된다.
const me = new Person('Kim');

//모든 프로토타입은 constructor를 가진다.

//따라서, me 객체는 Person.prototype을 상속 받게되니
//constructor를 사용할 수 있다.
console.log(me.constructor === Person) // true
```

![https://velog.velcdn.com/images/kozel/post/a49c1424-8ee6-4970-820e-adec1360c86a/image.jpeg](https://velog.velcdn.com/images/kozel/post/a49c1424-8ee6-4970-820e-adec1360c86a/image.jpeg)

## 리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입


생성자 함수를 통해 생성된 객체는 `prototype` 을 가지게되고, `constructor` 를 상속받아 사용할 수 있고, 생성자 함수에 접근할 수 있다고 했다.

그렇다면, 리터럴 표기법으로 생성된 객체는 어떨까?

```jsx
let obj = { name: 'Kim', age: 25 };

console.log(obj.constructor) //ƒ Object()
```

> 모든 객체는 자신의 생성자를 가리키는 `constructor`를 가진다.
>

따라서, 리터럴 표기법에 의해 생성된 객체도 `constructor` 를 가진다.  따라서, 리터럴 표기법에 의해 생성된 객체도 생성자 함수에 접근할 수 있다.

## 프로토타입의 생성 시점


> 프로토타입은 생성자 함수가 생성되는 시점에 더불어 생성된다.
>

### 1. 사용자 정의 생성자 함수와 프로토타입 생성 시점

```jsx
console.log(Person.prototype); // {constructor: f}

function Person(name) {
	this.name = name;
}
```

앞서 살펴 보았던, 함수 호이스팅에서 `함수 선언문` 은 런타임 이전에 실행되어 `객체가 생성`된다. 모든 객체는 생성자 함수와 연결되어 있으므로, 객체가 생성된 시점에 프로토타입이 생성된다.

### 2. 빌트인 생성자 함수와 프로토타입 생성 시점

- 빌트인 생성자 함수가 생성되는 시점에 프로토타입이 생성된다.
- 모든 빌트인 생성자 함수는 `전역 객체가` 생성되는 시점에 생성된다.
- `전역 객체`는 코드가 실행되기 이전에 자바스크립트 엔진에 의해 생성되는 특수한 객체이다.

따라서, 객체가 생성되기 이전에 이미 생성자 함수와 프로토타입은 존재한다. 후에 생성자 함수 또는 리터럴 표기법으로 객체를 생성하면 프로토타입은 내부 슬롯에 할당된다.

## 객체 생성 방식과 프로토타입의 결정


> 프로토타입은 추상 연산 `OrdinaryObjectCreate` 에 전달되는 인수에 의해 결정된다. 이 인수는 객체가 생성되는 시점에 객체 생성 방식에 의해 결정된다.
>

먼저 `OrdinaryObjectCreate` 함수를 살펴보자.

- `OrdinaryObjectCreate` 함수는 객체를 생성할 때 **프로토타입을 설정**할 수 있도록 설계되어있다.
- `OrdinaryObjectCreate` 함수는 **프로토타입으로 사용할 객체**를 **`인수`**로 받아, 새로 생성된 객체의 프로토타입을 그 인수로 설정한다.

따라서, 어떤 방식으로 객체를 생성하냐에 따라 프로토타입이 결정된다.

### 1. 객체 리터럴에 의해 생성된 객체의 프로토타입

> 객체 리터럴을 평가하여 객체를 생성할 때 추상 연산에 전달되는 프로토타입은 `Object.prototype` 이다.
>

### 2. Object 생성자 함수에 의해 생성된 객체의 프로토타입

> Object 생성자 함수를 호출하면 추상 연산에 전달되는 프로토타입은 `Object.prototype` 이다.
>

```jsx
📚 객체 리터럴 방식은 객체 리터럴 내부에 프로퍼티를 추가해야하지만, Object 생성자 함수 방식은 일단
	 빈 객체를 생성한 이후에 프로퍼티를 추가해야한다.

	 const obj = { x : 1 }

	 const obj2 = new Object();
	 obj2.x = 1;
```

### 3. 생성자 함수에 의해 생성된 객체의 프로토타입

> 생성자 함수에 의해 생성되는 객체의 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩 되어있는 객체다.
>

![https://velog.velcdn.com/images/kozel/post/d8b82780-9c9a-43d4-949b-c83c786884f4/image.jpeg](https://velog.velcdn.com/images/kozel/post/d8b82780-9c9a-43d4-949b-c83c786884f4/image.jpeg)

## 프로토타입 체인


> 객체의 프로퍼티에 접근하려고 할 때 해당 객체에 접근하려는 프로퍼티가 없다면 `[[Prototype]]` 내부 슬롯의 참조를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다.
>

```jsx
function Person(name) {
	this.name = name;
}

Person.prototype.sayHello = function() {
	console.log('Hi');
}

const me = new Person('Kim');

me.hasOwnProperty('name')
```

`me` 객체와 `Person` 에 `hasOwnProperty` 속성이 없는데 어떻게 `me` 는 사용할 수 있을까?

1. `me` 객체에서 `hasOwnProperty` 를 찾는다. `me` 에 `hasOwnProperty` 가 없으므로 내부 슬롯에 바인딩 되어있는 `Person.prototype`으로 이동하여 검색한다.
2. `Person.prototype` 에도 `hasOwnProperty` 이 없으므로 내부 슬롯에 바인딩 되어있는 `Object.prototype` 로 이동한다.
3. `Object.prototype` 에 `hasOwnProperty` 이 존재하므로 메소드를 호출한다.

![https://velog.velcdn.com/images/kozel/post/f3a6df39-6970-4769-8d6e-7fe375b5368c/image.jpeg](https://velog.velcdn.com/images/kozel/post/f3a6df39-6970-4769-8d6e-7fe375b5368c/image.jpeg)

## 오버라이딩과 프로퍼티 섀도잉


> 프로토타입 프로퍼티와 같은 이름의 프로퍼티를 인스턴스에 추가하면 인스턴스 프로퍼티에 추가된다. 이때 인스턴스 메서드는 프로토타입 메서드를 `오버라이딩` 했고 프로토타입 메서드는 가려지게 된다. 이를 `프로퍼티 섀도잉`이라한다.
>

`오버라이딩` : 상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의하여 사용하는 방식이다.

```jsx
const Person = (function () {
	//생성자 함수
  function Person(name) {
    this.name = name
  }

  Person.prototype.sayHello = function () {
    console.log(`hi, my name is ${this.name}`)
  }

  return Person
}())

const me = new Person('Kim')

me.sayHello = function () { //오버라이딩
  console.log('override')
}

me.sayHello() // override
```

![https://velog.velcdn.com/images/rlatp1409/post/9494d940-71c9-4d89-b9d1-918071ab9e16/IMG_82F41D4FD6A2-1.jpeg](https://velog.velcdn.com/images/rlatp1409/post/9494d940-71c9-4d89-b9d1-918071ab9e16/IMG_82F41D4FD6A2-1.jpeg)

## 프로토타입의 교체


### 1. 생성자 함수에 의한 프로토타입의 교체

```jsx
const Person = (function () {
  function Person(name) {
    this.name = name;
  }

  // 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교체
  Person.prototype = {
    sayHello() {
      console.log(`Hi! My name is ${this.name}`);
    }
  };

  return Person;
}());

const me = new Person('Lee');

//constructor 프로퍼티와 생성자 함수간의 연결 파괴
console.log(me.constructor === Person); // false
console.log(me.constructor === Object); // true
```

- `Person.prototype` 에 `객체 리터럴` 을 할당함으로써 `Person` 생성자 함수와의 연결이 끊기게 된다.
- `객체 리터럴` 은 `Object` 생성자 함수로 프로토타입이 교체되게 된다.

![https://velog.velcdn.com/images/jjinichoi/post/378c69fe-d5cb-4363-b609-b9e0a85e42af/image.png](https://velog.velcdn.com/images/jjinichoi/post/378c69fe-d5cb-4363-b609-b9e0a85e42af/image.png)

### 2. 인스턴스에 의한 프로토타입의 교체

```jsx
function Person(name) {
  this.name = name;
}

const me = new Person("Kim");

// 프로토타입으로 교체할 객체
const parent = {
  // constructor 프로퍼티와 생성자 함수 간의 연결을 설정
  constructor: Person,
  sayHello() {
    console.log(`Hi! My name is ${this.name}`);
  },
};

// 생성자 함수의 prototype 프로퍼티와 프로토타입 간의 연결을 설정
Person.prototype = parent;

// me 객체의 프로토타입을 parent 객체로 교체한다.
Object.setPrototypeOf(me, parent);
// 위 코드는 아래의 코드와 동일하게 동작한다.
// me.__proto__ = parent;

me.sayHello(); // Hi! My name is Kim
```

![https://velog.velcdn.com/images/jjinichoi/post/f79566a0-546e-400d-9318-fd78f9e8da30/image.png](https://velog.velcdn.com/images/jjinichoi/post/f79566a0-546e-400d-9318-fd78f9e8da30/image.png)

## instanceof 연산자


> 생성자 함수의 prototype에 바인딩된 객체가 프로토타입 체인 상에 존재하는지 확인한다.
>

```jsx
//생성자 함수
function Person(name) {
  this.name = name;
}

const me = new Person('Kim');

// Person.prototype과 Object.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가
console.log(me instanceof Person); // true
console.log(me instanceof Object); // true
```

인스턴스에 의한 프로토타입의 교체인 경우, 생성자 함수의 prototype 프로퍼티가 교체된 프로토타입을 가리키지 않으므로 `instanceof` 연산자의 의해 false로 반환된다.

```jsx
//생성자 함수
function Person(name) {
  this.name = name;
}

const me = new Person('Kim');

const parent = {};

Object.setPrototypeOf(me, parent);

console.log(me instanceof Person); // false
console.log(me instanceof Object); // true
```

반면 생성자 함수에 의한 프로토타입의 교체인 경우는, 생성자 함수의 prototype 프로퍼티와 프로토타입 간의 연결은 파괴되지 않으므로 `instanceof` 는 영향을 받지 않는다.

```jsx
const Person = (function () {
  function Person(name) {
    this.name = name;
  }

  // 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교체
  Person.prototype = {
    sayHello() {
      console.log(`Hi! My name is ${this.name}`);
    }
  };

  return Person;
}());

const me = new Person('Kim');

console.log(me instanceof Person); // true
console.log(me instanceof Object); // true
```

## 직접 상속


### 1. Object.create에 의한 직접 상속의 장점

- new 연산자가 없이도 객체를 생성할 수 있다.
- 프로토타입을 지정하면서 객체를 생성할 수 있다.
- 객체 리터럴에 의해 생성된 객체도 상속받을 수 있다.

```jsx
/**
* 지정된 프로토타입 및 프로퍼티를 갖는 새로운 객체를 생성하여 반환한다.
* @param {Object} prototype - 생성할 객체의 프로토타입으로 지정할 객체
* @param {Object} [propertiesObject] - 생성할 객체의 프로퍼티를 갖는 객체
* @returns {Object} 지정된 프로토타입 및 프로퍼티를 갖는 새로운 객체
*/
Object.create(prototype[, propertiesObject])
```

### 2. 객체 리터럴 내부에서 __proto__에 의한 직접 상속

```jsx
const myProto = { x: 10 };

// 객체 리터럴에 의해 객체를 생성하면서 프로토타입을 지정하여 직접 상속받을 수 있다.
const obj = {
  y: 20,
  // 객체를 직접 상속받는다.
  // obj → myProto → Object.prototype → null
  __proto__: myProto
};

/** 위 코드는 아래와 동일하다.
const obj = Object.create(myProto, {
  y: { value: 20, writable: true, enumerable: true, configurable: true }
});
*/

console.log(obj.x, obj.y); // 10 20
console.log(Object.getPrototypeOf(obj) === myProto); // true
```

## 정적 프로퍼티/메서드

---

> 생성자 함수로 인스턴스를 생성하지 않아도 참조/호출할 수 있는 프로퍼티/메서드를 말한다.
>

- 정적 프로퍼티 / 메서드는 인스턴스의 프로토타입 체인에 속한 객체의 프로퍼티 / 메서드가 아니므로 인스턴스로 접근할 수 없다.

```jsx
// 생성자 함수
function Person(name) {
  this.name = name;
}

// 프로토타입 메서드
Person.prototype.sayHello = function () {
  console.log(`Hi! My name is ${this.name}`);
};

// 정적 프로퍼티
Person.staticProp = 'static prop';

// 정적 메서드
Person.staticMethod = function () {
  console.log('staticMethod');
};

const me = new Person('Kim');

// 생성자 함수에 추가한 정적 프로퍼티/메서드는 생성자 함수로 참조/호출한다.
Person.staticMethod(); // staticMethod

// 정적 프로퍼티/메서드는 생성자 함수가 생성한 인스턴스로 참조/호출할 수 없다.
// 인스턴스로 참조/호출할 수 있는 프로퍼티/메서드는 프로토타입 체인 상에 존재해야 한다.
me.staticMethod(); // TypeError: me.staticMethod is not a function
```

## 프로퍼티 존재 확인


### 1. in 연산자

> in 연산자는 객체 내에 특정 프로퍼티가 존재하는지 여부를 확인한다.
>

```jsx
/**
* key: 프로퍼티 키를 나타내는 문자열
* object: 객체로 평가되는 표현식
*/
key in object
```

```jsx
const person = {
  name: 'Kim',
  address: 'Suwon'
};

// person 객체에 name 프로퍼티가 존재한다.
console.log('name' in person);  // true
// person 객체에 address 프로퍼티가 존재한다.
console.log('address' in person); // true
// person 객체에 age 프로퍼티가 존재하지 않는다.
console.log('age' in person);  // false
// 모든 프로토타입의 프로퍼티를 확인함 -> toString은 Object.prototype메서드에 존재한다.
console.log('toString' in person);  // true
```

in 연산자 대신 ES6에서 도입된 `Reflect.has` 메서드를 사용할 수도 있다.

```jsx
const person = { name : 'Kim' };

console.log(Reflect.has(person, 'name')) // true
console.log(Reflect.has(person, 'toString')) // true
```

### 2. Object.prototype.hasOwnProperty

> 인수로 전달받은 프로퍼티 키가 객체 고유의 프로퍼티 키인 경우에만 true를 반환하고 상속받은 프로토타입의 프로퍼티 키인 경우 false를 반환한다.
>

```jsx

const person = {
  name: 'Kim',
  address: 'Suwon'
};

console.log(person.hasOwnProperty('name')); // true
console.log(person.hasOwnProperty('age')); // false

//Object.prototype에서 상속받음
console.log(person.hasOwnProperty('toString')); // false
```

## 프로퍼티 열거


### 1. for…in 문

- for…in 문은 in 연산자처럼 순회 대상 객체의 프로퍼티뿐만 아니라 상속받은 프로토타입의 프로퍼티까지 열거한다. 하지만, `toString` 과 같은 `Object.prototype` 의 프로터피가 열거되지 않는다.
- 그 이유는 `toString` 메서드는 `[[Enumerable]]` 의 값이 false, 즉 메서드가 열거할 수 없도록 정의되어있기 때문이다.

따라서, for…in 문은 객체의 프로토타입 체인 상에 존재하는 모든 프로토타입의 프로퍼티 중에서 프로퍼티 어트리뷰트 `[[Enumerable]]` 의 값이 true인 프로퍼티를 순회하며 열거한다.

```jsx
const sym = Symbol();

const person = {
  name: 'Kim',
  address: 'Suwon',
  [sym]: 10,
  __proto__: { age: 20 }
};

for (const key in person) {
  console.log(key + ': ' + person[key]);
}
// name: Kim
// address: Suwon
// age: 20
```

### 2. Object.keys/values/entries 메서드

> 객체 자신의 고유 프로퍼티만 열거하기 위해서는 `Object.keys/values/entries` 메서드를 사용하는 것을 권장한다.
>

- `Object.keys` 메서드 : 객체 자신의 열거 가능한 프로퍼티 "키"를 배열로 반환

```jsx
const person = {
  name: 'Kim',
  address: 'Suwon',
  __proto__: { age: 20 }
};

console.log(Object.keys(person)); // ["name", "address"]
```

- **`Object.values` 메서드** : 객체 자신의 열거 가능한 **프로퍼티 "값"을 배열로 반환**(ES8에서 도입)

```jsx
console.log(Object.values(person)); // ["Kim", "Suwon"]
```

- **`Object.entries` 메서드** : 객체 자신의 열거 가능한 **프로퍼티 "키와 값"의 쌍의 배열을 반환**(ES8에서 도입)

```jsx
console.log(Object.entries(person)); // [["name", "Kim"], ["address", "Suwon"]]

Object.entries(person).forEach(([key, value]) => console.log(key, value));
/*
name Kim
address Suwon
*/
```